<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Video HTML 5" width="100%" height="400" scrolling="false">
    <Require feature="dynamic-height" />
  </ModulePrefs>
  <UserPref name="videoURL" display_name="Youtube Video URL" />
  <UserPref name="autoplay" display_name="Autoplay" datatype="bool" />
  <UserPref name="subtitles" display_name="Subtitles" datatype="bool" />
  <Content type="html">
        <![CDATA[

    <html>
    <body>
      <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
      <div id="player"></div>
      <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";

        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        var pref = new gadgets.Prefs();

        var ratio = (('9') || '480') / (('16') || '720');
		var autoplayVideo = pref.getBool("autoplay");
		var showSubtitles = pref.getBool("subtitles");
		
        function onYouTubeIframeAPIReady() {

          var videoURL = pref.getString("videoURL");
          var results = videoURL.match(/v=(\w+)/);

          // check for result
          if (results == null) var videoId = videoURL;
          else videoId = results[1];
		  
		  
		  var parameters = {
                  height: '100%',
                  width: '100%',
                  videoId: videoId,
				  playerVars: { },
                  events: {
                          'onReady': onPlayerReady
                          }
                  };
		  
		  if (showSubtitles==1) parameters.playerVars.cc_load_policy = 1;
		  
          player = new YT.Player('player', parameters);
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
          cropToVideoRatio();
		  if (autoplayVideo) {
		  event.target.playVideo();
		  }  
          
        }

        function stopVideo() {
          player.stopVideo();
        }

        function cropToVideoRatio(){
          var desiredHeight = document.body.getClientRects()[0].width * ratio;
          gadgets.window.adjustHeight(desiredHeight)
        }

        window.onresize = cropToVideoRatio;

      </script>
    </body>
    </html>
    ]]>
    </Content>
</Module>